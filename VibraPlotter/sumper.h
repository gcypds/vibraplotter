#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.33440.
// 
using namespace System;
ref class NewDataSet;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class NewDataSet : public ::System::Data::DataSet {
    public : ref class sumperDataTable;
    public : ref class infoDataTable;
    public : ref class sensitivityDataTable;
    public : ref class sensedataDataTable;
    public : ref class commentsDataTable;
    public : ref class commentDataTable;
    public : ref class sumperRow;
    public : ref class infoRow;
    public : ref class sensitivityRow;
    public : ref class sensedataRow;
    public : ref class commentsRow;
    public : ref class commentRow;
    public : ref class sumperRowChangeEvent;
    public : ref class infoRowChangeEvent;
    public : ref class sensitivityRowChangeEvent;
    public : ref class sensedataRowChangeEvent;
    public : ref class commentsRowChangeEvent;
    public : ref class commentRowChangeEvent;
    
    private: NewDataSet::sumperDataTable^  tablesumper;
    
    private: NewDataSet::infoDataTable^  tableinfo;
    
    private: NewDataSet::sensitivityDataTable^  tablesensitivity;
    
    private: NewDataSet::sensedataDataTable^  tablesensedata;
    
    private: NewDataSet::commentsDataTable^  tablecomments;
    
    private: NewDataSet::commentDataTable^  tablecomment;
    
    private: ::System::Data::DataRelation^  relationsumper_info;
    
    private: ::System::Data::DataRelation^  relationsumper_sensitivity;
    
    private: ::System::Data::DataRelation^  relationsensitivity_sensedata;
    
    private: ::System::Data::DataRelation^  relationsumper_comments;
    
    private: ::System::Data::DataRelation^  relationcomments_comment;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void sumperRowChangeEventHandler(::System::Object^  sender, NewDataSet::sumperRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void infoRowChangeEventHandler(::System::Object^  sender, NewDataSet::infoRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void sensitivityRowChangeEventHandler(::System::Object^  sender, NewDataSet::sensitivityRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void sensedataRowChangeEventHandler(::System::Object^  sender, NewDataSet::sensedataRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void commentsRowChangeEventHandler(::System::Object^  sender, NewDataSet::commentsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void commentRowChangeEventHandler(::System::Object^  sender, NewDataSet::commentRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::sumperDataTable^  sumper {
        NewDataSet::sumperDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::infoDataTable^  info {
        NewDataSet::infoDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::sensitivityDataTable^  sensitivity {
        NewDataSet::sensitivityDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::sensedataDataTable^  sensedata {
        NewDataSet::sensedataDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::commentsDataTable^  comments {
        NewDataSet::commentsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::commentDataTable^  comment {
        NewDataSet::commentDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializesumper();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeinfo();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializesensitivity();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializesensedata();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializecomments();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializecomment();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class sumperDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnversion;
        
        private: ::System::Data::DataColumn^  columnsumper_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sumperRowChangeEventHandler^  sumperRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sumperRowChangeEventHandler^  sumperRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sumperRowChangeEventHandler^  sumperRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sumperRowChangeEventHandler^  sumperRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sumperDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sumperDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sumperDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  versionColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  sumper_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sumperRow^  default [::System::Int32 ] {
            NewDataSet::sumperRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddsumperRow(NewDataSet::sumperRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::sumperRow^  AddsumperRow(System::String^  version);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::sumperRow^  NewsumperRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovesumperRow(NewDataSet::sumperRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class infoDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndate;
        
        private: ::System::Data::DataColumn^  columntime;
        
        private: ::System::Data::DataColumn^  columnchannels;
        
        private: ::System::Data::DataColumn^  columndatapath;
        
        private: ::System::Data::DataColumn^  columncompressed;
        
        private: ::System::Data::DataColumn^  columncompressedpath;
        
        private: ::System::Data::DataColumn^  columninfo_text;
        
        private: ::System::Data::DataColumn^  columnsumper_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::infoRowChangeEventHandler^  infoRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::infoRowChangeEventHandler^  infoRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::infoRowChangeEventHandler^  infoRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::infoRowChangeEventHandler^  infoRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        infoDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        infoDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        infoDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  dateColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  timeColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  channelsColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  datapathColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  compressedColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  compressedpathColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  info_textColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  sumper_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::infoRow^  default [::System::Int32 ] {
            NewDataSet::infoRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddinfoRow(NewDataSet::infoRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::infoRow^  AddinfoRow(
                    System::String^  date, 
                    System::String^  time, 
                    System::Int32 channels, 
                    System::String^  datapath, 
                    System::Int32 compressed, 
                    System::String^  compressedpath, 
                    System::String^  info_text, 
                    NewDataSet::sumperRow^  parentsumperRowBysumper_info);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::infoRow^  NewinfoRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveinfoRow(NewDataSet::infoRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class sensitivityDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnsensitivity_Id;
        
        private: ::System::Data::DataColumn^  columnsumper_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sensitivityRowChangeEventHandler^  sensitivityRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sensitivityRowChangeEventHandler^  sensitivityRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sensitivityRowChangeEventHandler^  sensitivityRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sensitivityRowChangeEventHandler^  sensitivityRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sensitivityDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sensitivityDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sensitivityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  sensitivity_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  sumper_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sensitivityRow^  default [::System::Int32 ] {
            NewDataSet::sensitivityRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddsensitivityRow(NewDataSet::sensitivityRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::sensitivityRow^  AddsensitivityRow(NewDataSet::sumperRow^  parentsumperRowBysumper_sensitivity);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::sensitivityRow^  NewsensitivityRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovesensitivityRow(NewDataSet::sensitivityRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class sensedataDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnchannel;
        
        private: ::System::Data::DataColumn^  columnlevel;
        
        private: ::System::Data::DataColumn^  columnsensedata_text;
        
        private: ::System::Data::DataColumn^  columnsensitivity_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sensedataRowChangeEventHandler^  sensedataRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sensedataRowChangeEventHandler^  sensedataRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sensedataRowChangeEventHandler^  sensedataRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::sensedataRowChangeEventHandler^  sensedataRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sensedataDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sensedataDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sensedataDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  channelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  levelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  sensedata_textColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  sensitivity_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sensedataRow^  default [::System::Int32 ] {
            NewDataSet::sensedataRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddsensedataRow(NewDataSet::sensedataRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::sensedataRow^  AddsensedataRow(System::Int32 channel, System::Single level, System::String^  sensedata_text, 
                    NewDataSet::sensitivityRow^  parentsensitivityRowBysensitivity_sensedata);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::sensedataRow^  NewsensedataRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovesensedataRow(NewDataSet::sensedataRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class commentsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columncomments_Id;
        
        private: ::System::Data::DataColumn^  columnsumper_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::commentsRowChangeEventHandler^  commentsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::commentsRowChangeEventHandler^  commentsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::commentsRowChangeEventHandler^  commentsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::commentsRowChangeEventHandler^  commentsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        commentsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        commentsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        commentsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  comments_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  sumper_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::commentsRow^  default [::System::Int32 ] {
            NewDataSet::commentsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddcommentsRow(NewDataSet::commentsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::commentsRow^  AddcommentsRow(NewDataSet::sumperRow^  parentsumperRowBysumper_comments);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::commentsRow^  NewcommentsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovecommentsRow(NewDataSet::commentsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class commentDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnchannel;
        
        private: ::System::Data::DataColumn^  columntext;
        
        private: ::System::Data::DataColumn^  columncomment_text;
        
        private: ::System::Data::DataColumn^  columncomments_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::commentRowChangeEventHandler^  commentRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::commentRowChangeEventHandler^  commentRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::commentRowChangeEventHandler^  commentRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::commentRowChangeEventHandler^  commentRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        commentDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        commentDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        commentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  channelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  textColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  comment_textColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  comments_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::commentRow^  default [::System::Int32 ] {
            NewDataSet::commentRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddcommentRow(NewDataSet::commentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::commentRow^  AddcommentRow(System::Int32 channel, System::String^  text, System::String^  comment_text, 
                    NewDataSet::commentsRow^  parentcommentsRowBycomments_comment);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::commentRow^  NewcommentRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovecommentRow(NewDataSet::commentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class sumperRow : public ::System::Data::DataRow {
        
        private: NewDataSet::sumperDataTable^  tablesumper;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sumperRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  version {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 sumper_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsversionNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetversionNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::infoRow^  >^  GetinfoRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::sensitivityRow^  >^  GetsensitivityRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::commentsRow^  >^  GetcommentsRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class infoRow : public ::System::Data::DataRow {
        
        private: NewDataSet::infoDataTable^  tableinfo;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        infoRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  date {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  time {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 channels {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  datapath {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 compressed {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  compressedpath {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  info_text {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 sumper_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sumperRow^  sumperRow {
            NewDataSet::sumperRow^  get();
            System::Void set(NewDataSet::sumperRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsdateNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetdateNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IstimeNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SettimeNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IschannelsNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetchannelsNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsdatapathNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetdatapathNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IscompressedNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetcompressedNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IscompressedpathNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetcompressedpathNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Issumper_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setsumper_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class sensitivityRow : public ::System::Data::DataRow {
        
        private: NewDataSet::sensitivityDataTable^  tablesensitivity;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sensitivityRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 sensitivity_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 sumper_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sumperRow^  sumperRow {
            NewDataSet::sumperRow^  get();
            System::Void set(NewDataSet::sumperRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Issumper_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setsumper_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::sensedataRow^  >^  GetsensedataRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class sensedataRow : public ::System::Data::DataRow {
        
        private: NewDataSet::sensedataDataTable^  tablesensedata;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sensedataRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 channel {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Single level {
            System::Single get();
            System::Void set(System::Single value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  sensedata_text {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 sensitivity_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sensitivityRow^  sensitivityRow {
            NewDataSet::sensitivityRow^  get();
            System::Void set(NewDataSet::sensitivityRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IschannelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetchannelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IslevelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetlevelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Issensitivity_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setsensitivity_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class commentsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::commentsDataTable^  tablecomments;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        commentsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 comments_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 sumper_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sumperRow^  sumperRow {
            NewDataSet::sumperRow^  get();
            System::Void set(NewDataSet::sumperRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Issumper_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setsumper_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::commentRow^  >^  GetcommentRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class commentRow : public ::System::Data::DataRow {
        
        private: NewDataSet::commentDataTable^  tablecomment;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        commentRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 channel {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  text {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  comment_text {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 comments_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::commentsRow^  commentsRow {
            NewDataSet::commentsRow^  get();
            System::Void set(NewDataSet::commentsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IschannelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetchannelNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IstextNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SettextNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Iscomments_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setcomments_IdNull();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class sumperRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::sumperRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sumperRowChangeEvent(NewDataSet::sumperRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sumperRow^  Row {
            NewDataSet::sumperRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class infoRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::infoRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        infoRowChangeEvent(NewDataSet::infoRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::infoRow^  Row {
            NewDataSet::infoRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class sensitivityRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::sensitivityRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sensitivityRowChangeEvent(NewDataSet::sensitivityRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sensitivityRow^  Row {
            NewDataSet::sensitivityRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class sensedataRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::sensedataRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        sensedataRowChangeEvent(NewDataSet::sensedataRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::sensedataRow^  Row {
            NewDataSet::sensedataRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class commentsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::commentsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        commentsRowChangeEvent(NewDataSet::commentsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::commentsRow^  Row {
            NewDataSet::commentsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class commentRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::commentRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        commentRowChangeEvent(NewDataSet::commentRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::commentRow^  Row {
            NewDataSet::commentRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline NewDataSet::NewDataSet() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"sumper"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::sumperDataTable(ds->Tables[L"sumper"])));
        }
        if (ds->Tables[L"info"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::infoDataTable(ds->Tables[L"info"])));
        }
        if (ds->Tables[L"sensitivity"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::sensitivityDataTable(ds->Tables[L"sensitivity"])));
        }
        if (ds->Tables[L"sensedata"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::sensedataDataTable(ds->Tables[L"sensedata"])));
        }
        if (ds->Tables[L"comments"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::commentsDataTable(ds->Tables[L"comments"])));
        }
        if (ds->Tables[L"comment"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::commentDataTable(ds->Tables[L"comment"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline NewDataSet::sumperDataTable^  NewDataSet::sumper::get() {
    return this->tablesumper;
}

inline NewDataSet::infoDataTable^  NewDataSet::info::get() {
    return this->tableinfo;
}

inline NewDataSet::sensitivityDataTable^  NewDataSet::sensitivity::get() {
    return this->tablesensitivity;
}

inline NewDataSet::sensedataDataTable^  NewDataSet::sensedata::get() {
    return this->tablesensedata;
}

inline NewDataSet::commentsDataTable^  NewDataSet::comments::get() {
    return this->tablecomments;
}

inline NewDataSet::commentDataTable^  NewDataSet::comment::get() {
    return this->tablecomment;
}

inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
    return __super::Relations;
}

inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  NewDataSet::Clone() {
    NewDataSet^  cln = (cli::safe_cast<NewDataSet^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"sumper"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::sumperDataTable(ds->Tables[L"sumper"])));
        }
        if (ds->Tables[L"info"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::infoDataTable(ds->Tables[L"info"])));
        }
        if (ds->Tables[L"sensitivity"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::sensitivityDataTable(ds->Tables[L"sensitivity"])));
        }
        if (ds->Tables[L"sensedata"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::sensedataDataTable(ds->Tables[L"sensedata"])));
        }
        if (ds->Tables[L"comments"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::commentsDataTable(ds->Tables[L"comments"])));
        }
        if (ds->Tables[L"comment"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::commentDataTable(ds->Tables[L"comment"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void NewDataSet::InitVars() {
    this->InitVars(true);
}

inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
    this->tablesumper = (cli::safe_cast<NewDataSet::sumperDataTable^  >(__super::Tables[L"sumper"]));
    if (initTable == true) {
        if (this->tablesumper != nullptr) {
            this->tablesumper->InitVars();
        }
    }
    this->tableinfo = (cli::safe_cast<NewDataSet::infoDataTable^  >(__super::Tables[L"info"]));
    if (initTable == true) {
        if (this->tableinfo != nullptr) {
            this->tableinfo->InitVars();
        }
    }
    this->tablesensitivity = (cli::safe_cast<NewDataSet::sensitivityDataTable^  >(__super::Tables[L"sensitivity"]));
    if (initTable == true) {
        if (this->tablesensitivity != nullptr) {
            this->tablesensitivity->InitVars();
        }
    }
    this->tablesensedata = (cli::safe_cast<NewDataSet::sensedataDataTable^  >(__super::Tables[L"sensedata"]));
    if (initTable == true) {
        if (this->tablesensedata != nullptr) {
            this->tablesensedata->InitVars();
        }
    }
    this->tablecomments = (cli::safe_cast<NewDataSet::commentsDataTable^  >(__super::Tables[L"comments"]));
    if (initTable == true) {
        if (this->tablecomments != nullptr) {
            this->tablecomments->InitVars();
        }
    }
    this->tablecomment = (cli::safe_cast<NewDataSet::commentDataTable^  >(__super::Tables[L"comment"]));
    if (initTable == true) {
        if (this->tablecomment != nullptr) {
            this->tablecomment->InitVars();
        }
    }
    this->relationsumper_info = this->Relations[L"sumper_info"];
    this->relationsumper_sensitivity = this->Relations[L"sumper_sensitivity"];
    this->relationsensitivity_sensedata = this->Relations[L"sensitivity_sensedata"];
    this->relationsumper_comments = this->Relations[L"sumper_comments"];
    this->relationcomments_comment = this->Relations[L"comments_comment"];
}

inline ::System::Void NewDataSet::InitClass() {
    this->DataSetName = L"NewDataSet";
    this->Prefix = L"";
    this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tablesumper = (gcnew NewDataSet::sumperDataTable());
    __super::Tables->Add(this->tablesumper);
    this->tableinfo = (gcnew NewDataSet::infoDataTable());
    __super::Tables->Add(this->tableinfo);
    this->tablesensitivity = (gcnew NewDataSet::sensitivityDataTable());
    __super::Tables->Add(this->tablesensitivity);
    this->tablesensedata = (gcnew NewDataSet::sensedataDataTable());
    __super::Tables->Add(this->tablesensedata);
    this->tablecomments = (gcnew NewDataSet::commentsDataTable());
    __super::Tables->Add(this->tablecomments);
    this->tablecomment = (gcnew NewDataSet::commentDataTable());
    __super::Tables->Add(this->tablecomment);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"sumper_info", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesumper->sumper_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinfo->sumper_IdColumn}));
    this->tableinfo->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"sumper_sensitivity", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesumper->sumper_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesensitivity->sumper_IdColumn}));
    this->tablesensitivity->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"sensitivity_sensedata", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesensitivity->sensitivity_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesensedata->sensitivity_IdColumn}));
    this->tablesensedata->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"sumper_comments", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesumper->sumper_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecomments->sumper_IdColumn}));
    this->tablecomments->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"comments_comment", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecomments->comments_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecomment->comments_IdColumn}));
    this->tablecomment->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationsumper_info = (gcnew ::System::Data::DataRelation(L"sumper_info", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesumper->sumper_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinfo->sumper_IdColumn}, false));
    this->relationsumper_info->Nested = true;
    this->Relations->Add(this->relationsumper_info);
    this->relationsumper_sensitivity = (gcnew ::System::Data::DataRelation(L"sumper_sensitivity", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesumper->sumper_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesensitivity->sumper_IdColumn}, false));
    this->relationsumper_sensitivity->Nested = true;
    this->Relations->Add(this->relationsumper_sensitivity);
    this->relationsensitivity_sensedata = (gcnew ::System::Data::DataRelation(L"sensitivity_sensedata", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesensitivity->sensitivity_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesensedata->sensitivity_IdColumn}, false));
    this->relationsensitivity_sensedata->Nested = true;
    this->Relations->Add(this->relationsensitivity_sensedata);
    this->relationsumper_comments = (gcnew ::System::Data::DataRelation(L"sumper_comments", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesumper->sumper_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecomments->sumper_IdColumn}, false));
    this->relationsumper_comments->Nested = true;
    this->Relations->Add(this->relationsumper_comments);
    this->relationcomments_comment = (gcnew ::System::Data::DataRelation(L"comments_comment", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecomments->comments_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecomment->comments_IdColumn}, false));
    this->relationcomments_comment->Nested = true;
    this->Relations->Add(this->relationcomments_comment);
}

inline ::System::Boolean NewDataSet::ShouldSerializesumper() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeinfo() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializesensitivity() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializesensedata() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializecomments() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializecomment() {
    return false;
}

inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::sumperDataTable::sumperDataTable() {
    this->TableName = L"sumper";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::sumperDataTable::sumperDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::sumperDataTable::sumperDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::sumperDataTable::versionColumn::get() {
    return this->columnversion;
}

inline ::System::Data::DataColumn^  NewDataSet::sumperDataTable::sumper_IdColumn::get() {
    return this->columnsumper_Id;
}

inline ::System::Int32 NewDataSet::sumperDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::sumperRow^  NewDataSet::sumperDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::sumperRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::sumperDataTable::AddsumperRow(NewDataSet::sumperRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::sumperRow^  NewDataSet::sumperDataTable::AddsumperRow(System::String^  version) {
    NewDataSet::sumperRow^  rowsumperRow = (cli::safe_cast<NewDataSet::sumperRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {version, nullptr};
    rowsumperRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowsumperRow);
    return rowsumperRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::sumperDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::sumperDataTable::Clone() {
    NewDataSet::sumperDataTable^  cln = (cli::safe_cast<NewDataSet::sumperDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::sumperDataTable::CreateInstance() {
    return (gcnew NewDataSet::sumperDataTable());
}

inline ::System::Void NewDataSet::sumperDataTable::InitVars() {
    this->columnversion = __super::Columns[L"version"];
    this->columnsumper_Id = __super::Columns[L"sumper_Id"];
}

inline ::System::Void NewDataSet::sumperDataTable::InitClass() {
    this->columnversion = (gcnew ::System::Data::DataColumn(L"version", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnversion);
    this->columnsumper_Id = (gcnew ::System::Data::DataColumn(L"sumper_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsumper_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnsumper_Id}, 
            true)));
    this->columnversion->Namespace = L"";
    this->columnsumper_Id->AutoIncrement = true;
    this->columnsumper_Id->AllowDBNull = false;
    this->columnsumper_Id->Unique = true;
}

inline NewDataSet::sumperRow^  NewDataSet::sumperDataTable::NewsumperRow() {
    return (cli::safe_cast<NewDataSet::sumperRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::sumperDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::sumperRow(builder));
}

inline ::System::Type^  NewDataSet::sumperDataTable::GetRowType() {
    return NewDataSet::sumperRow::typeid;
}

inline ::System::Void NewDataSet::sumperDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->sumperRowChanged(this, (gcnew NewDataSet::sumperRowChangeEvent((cli::safe_cast<NewDataSet::sumperRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sumperDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->sumperRowChanging(this, (gcnew NewDataSet::sumperRowChangeEvent((cli::safe_cast<NewDataSet::sumperRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sumperDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->sumperRowDeleted(this, (gcnew NewDataSet::sumperRowChangeEvent((cli::safe_cast<NewDataSet::sumperRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sumperDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->sumperRowDeleting(this, (gcnew NewDataSet::sumperRowChangeEvent((cli::safe_cast<NewDataSet::sumperRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sumperDataTable::RemovesumperRow(NewDataSet::sumperRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::sumperDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"sumperDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::infoDataTable::infoDataTable() {
    this->TableName = L"info";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::infoDataTable::infoDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::infoDataTable::infoDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::infoDataTable::dateColumn::get() {
    return this->columndate;
}

inline ::System::Data::DataColumn^  NewDataSet::infoDataTable::timeColumn::get() {
    return this->columntime;
}

inline ::System::Data::DataColumn^  NewDataSet::infoDataTable::channelsColumn::get() {
    return this->columnchannels;
}

inline ::System::Data::DataColumn^  NewDataSet::infoDataTable::datapathColumn::get() {
    return this->columndatapath;
}

inline ::System::Data::DataColumn^  NewDataSet::infoDataTable::compressedColumn::get() {
    return this->columncompressed;
}

inline ::System::Data::DataColumn^  NewDataSet::infoDataTable::compressedpathColumn::get() {
    return this->columncompressedpath;
}

inline ::System::Data::DataColumn^  NewDataSet::infoDataTable::info_textColumn::get() {
    return this->columninfo_text;
}

inline ::System::Data::DataColumn^  NewDataSet::infoDataTable::sumper_IdColumn::get() {
    return this->columnsumper_Id;
}

inline ::System::Int32 NewDataSet::infoDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::infoRow^  NewDataSet::infoDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::infoRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::infoDataTable::AddinfoRow(NewDataSet::infoRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::infoRow^  NewDataSet::infoDataTable::AddinfoRow(
            System::String^  date, 
            System::String^  time, 
            System::Int32 channels, 
            System::String^  datapath, 
            System::Int32 compressed, 
            System::String^  compressedpath, 
            System::String^  info_text, 
            NewDataSet::sumperRow^  parentsumperRowBysumper_info) {
    NewDataSet::infoRow^  rowinfoRow = (cli::safe_cast<NewDataSet::infoRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(8) {date, time, channels, datapath, 
        compressed, compressedpath, info_text, nullptr};
    if (parentsumperRowBysumper_info != nullptr) {
        columnValuesArray[7] = parentsumperRowBysumper_info[1];
    }
    rowinfoRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowinfoRow);
    return rowinfoRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::infoDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::infoDataTable::Clone() {
    NewDataSet::infoDataTable^  cln = (cli::safe_cast<NewDataSet::infoDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::infoDataTable::CreateInstance() {
    return (gcnew NewDataSet::infoDataTable());
}

inline ::System::Void NewDataSet::infoDataTable::InitVars() {
    this->columndate = __super::Columns[L"date"];
    this->columntime = __super::Columns[L"time"];
    this->columnchannels = __super::Columns[L"channels"];
    this->columndatapath = __super::Columns[L"datapath"];
    this->columncompressed = __super::Columns[L"compressed"];
    this->columncompressedpath = __super::Columns[L"compressedpath"];
    this->columninfo_text = __super::Columns[L"info_text"];
    this->columnsumper_Id = __super::Columns[L"sumper_Id"];
}

inline ::System::Void NewDataSet::infoDataTable::InitClass() {
    this->columndate = (gcnew ::System::Data::DataColumn(L"date", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columndate);
    this->columntime = (gcnew ::System::Data::DataColumn(L"time", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columntime);
    this->columnchannels = (gcnew ::System::Data::DataColumn(L"channels", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnchannels);
    this->columndatapath = (gcnew ::System::Data::DataColumn(L"datapath", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columndatapath);
    this->columncompressed = (gcnew ::System::Data::DataColumn(L"compressed", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columncompressed);
    this->columncompressedpath = (gcnew ::System::Data::DataColumn(L"compressedpath", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columncompressedpath);
    this->columninfo_text = (gcnew ::System::Data::DataColumn(L"info_text", ::System::String::typeid, nullptr, ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columninfo_text);
    this->columnsumper_Id = (gcnew ::System::Data::DataColumn(L"sumper_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsumper_Id);
    this->columndate->Namespace = L"";
    this->columntime->Namespace = L"";
    this->columnchannels->Namespace = L"";
    this->columndatapath->Namespace = L"";
    this->columncompressed->Namespace = L"";
    this->columncompressedpath->Namespace = L"";
    this->columninfo_text->AllowDBNull = false;
}

inline NewDataSet::infoRow^  NewDataSet::infoDataTable::NewinfoRow() {
    return (cli::safe_cast<NewDataSet::infoRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::infoDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::infoRow(builder));
}

inline ::System::Type^  NewDataSet::infoDataTable::GetRowType() {
    return NewDataSet::infoRow::typeid;
}

inline ::System::Void NewDataSet::infoDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->infoRowChanged(this, (gcnew NewDataSet::infoRowChangeEvent((cli::safe_cast<NewDataSet::infoRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::infoDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->infoRowChanging(this, (gcnew NewDataSet::infoRowChangeEvent((cli::safe_cast<NewDataSet::infoRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::infoDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->infoRowDeleted(this, (gcnew NewDataSet::infoRowChangeEvent((cli::safe_cast<NewDataSet::infoRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::infoDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->infoRowDeleting(this, (gcnew NewDataSet::infoRowChangeEvent((cli::safe_cast<NewDataSet::infoRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::infoDataTable::RemoveinfoRow(NewDataSet::infoRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::infoDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"infoDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::sensitivityDataTable::sensitivityDataTable() {
    this->TableName = L"sensitivity";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::sensitivityDataTable::sensitivityDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::sensitivityDataTable::sensitivityDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::sensitivityDataTable::sensitivity_IdColumn::get() {
    return this->columnsensitivity_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::sensitivityDataTable::sumper_IdColumn::get() {
    return this->columnsumper_Id;
}

inline ::System::Int32 NewDataSet::sensitivityDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::sensitivityRow^  NewDataSet::sensitivityDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::sensitivityRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::sensitivityDataTable::AddsensitivityRow(NewDataSet::sensitivityRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::sensitivityRow^  NewDataSet::sensitivityDataTable::AddsensitivityRow(NewDataSet::sumperRow^  parentsumperRowBysumper_sensitivity) {
    NewDataSet::sensitivityRow^  rowsensitivityRow = (cli::safe_cast<NewDataSet::sensitivityRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentsumperRowBysumper_sensitivity != nullptr) {
        columnValuesArray[1] = parentsumperRowBysumper_sensitivity[1];
    }
    rowsensitivityRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowsensitivityRow);
    return rowsensitivityRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::sensitivityDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::sensitivityDataTable::Clone() {
    NewDataSet::sensitivityDataTable^  cln = (cli::safe_cast<NewDataSet::sensitivityDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::sensitivityDataTable::CreateInstance() {
    return (gcnew NewDataSet::sensitivityDataTable());
}

inline ::System::Void NewDataSet::sensitivityDataTable::InitVars() {
    this->columnsensitivity_Id = __super::Columns[L"sensitivity_Id"];
    this->columnsumper_Id = __super::Columns[L"sumper_Id"];
}

inline ::System::Void NewDataSet::sensitivityDataTable::InitClass() {
    this->columnsensitivity_Id = (gcnew ::System::Data::DataColumn(L"sensitivity_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsensitivity_Id);
    this->columnsumper_Id = (gcnew ::System::Data::DataColumn(L"sumper_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsumper_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnsensitivity_Id}, 
            true)));
    this->columnsensitivity_Id->AutoIncrement = true;
    this->columnsensitivity_Id->AllowDBNull = false;
    this->columnsensitivity_Id->Unique = true;
}

inline NewDataSet::sensitivityRow^  NewDataSet::sensitivityDataTable::NewsensitivityRow() {
    return (cli::safe_cast<NewDataSet::sensitivityRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::sensitivityDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::sensitivityRow(builder));
}

inline ::System::Type^  NewDataSet::sensitivityDataTable::GetRowType() {
    return NewDataSet::sensitivityRow::typeid;
}

inline ::System::Void NewDataSet::sensitivityDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->sensitivityRowChanged(this, (gcnew NewDataSet::sensitivityRowChangeEvent((cli::safe_cast<NewDataSet::sensitivityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sensitivityDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->sensitivityRowChanging(this, (gcnew NewDataSet::sensitivityRowChangeEvent((cli::safe_cast<NewDataSet::sensitivityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sensitivityDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->sensitivityRowDeleted(this, (gcnew NewDataSet::sensitivityRowChangeEvent((cli::safe_cast<NewDataSet::sensitivityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sensitivityDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->sensitivityRowDeleting(this, (gcnew NewDataSet::sensitivityRowChangeEvent((cli::safe_cast<NewDataSet::sensitivityRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sensitivityDataTable::RemovesensitivityRow(NewDataSet::sensitivityRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::sensitivityDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"sensitivityDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::sensedataDataTable::sensedataDataTable() {
    this->TableName = L"sensedata";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::sensedataDataTable::sensedataDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::sensedataDataTable::sensedataDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::sensedataDataTable::channelColumn::get() {
    return this->columnchannel;
}

inline ::System::Data::DataColumn^  NewDataSet::sensedataDataTable::levelColumn::get() {
    return this->columnlevel;
}

inline ::System::Data::DataColumn^  NewDataSet::sensedataDataTable::sensedata_textColumn::get() {
    return this->columnsensedata_text;
}

inline ::System::Data::DataColumn^  NewDataSet::sensedataDataTable::sensitivity_IdColumn::get() {
    return this->columnsensitivity_Id;
}

inline ::System::Int32 NewDataSet::sensedataDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::sensedataRow^  NewDataSet::sensedataDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::sensedataRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::sensedataDataTable::AddsensedataRow(NewDataSet::sensedataRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::sensedataRow^  NewDataSet::sensedataDataTable::AddsensedataRow(System::Int32 channel, System::Single level, 
            System::String^  sensedata_text, NewDataSet::sensitivityRow^  parentsensitivityRowBysensitivity_sensedata) {
    NewDataSet::sensedataRow^  rowsensedataRow = (cli::safe_cast<NewDataSet::sensedataRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {channel, level, sensedata_text, 
        nullptr};
    if (parentsensitivityRowBysensitivity_sensedata != nullptr) {
        columnValuesArray[3] = parentsensitivityRowBysensitivity_sensedata[0];
    }
    rowsensedataRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowsensedataRow);
    return rowsensedataRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::sensedataDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::sensedataDataTable::Clone() {
    NewDataSet::sensedataDataTable^  cln = (cli::safe_cast<NewDataSet::sensedataDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::sensedataDataTable::CreateInstance() {
    return (gcnew NewDataSet::sensedataDataTable());
}

inline ::System::Void NewDataSet::sensedataDataTable::InitVars() {
    this->columnchannel = __super::Columns[L"channel"];
    this->columnlevel = __super::Columns[L"level"];
    this->columnsensedata_text = __super::Columns[L"sensedata_text"];
    this->columnsensitivity_Id = __super::Columns[L"sensitivity_Id"];
}

inline ::System::Void NewDataSet::sensedataDataTable::InitClass() {
    this->columnchannel = (gcnew ::System::Data::DataColumn(L"channel", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnchannel);
    this->columnlevel = (gcnew ::System::Data::DataColumn(L"level", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnlevel);
    this->columnsensedata_text = (gcnew ::System::Data::DataColumn(L"sensedata_text", ::System::String::typeid, nullptr, ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columnsensedata_text);
    this->columnsensitivity_Id = (gcnew ::System::Data::DataColumn(L"sensitivity_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsensitivity_Id);
    this->columnchannel->Namespace = L"";
    this->columnlevel->Namespace = L"";
    this->columnsensedata_text->AllowDBNull = false;
}

inline NewDataSet::sensedataRow^  NewDataSet::sensedataDataTable::NewsensedataRow() {
    return (cli::safe_cast<NewDataSet::sensedataRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::sensedataDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::sensedataRow(builder));
}

inline ::System::Type^  NewDataSet::sensedataDataTable::GetRowType() {
    return NewDataSet::sensedataRow::typeid;
}

inline ::System::Void NewDataSet::sensedataDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->sensedataRowChanged(this, (gcnew NewDataSet::sensedataRowChangeEvent((cli::safe_cast<NewDataSet::sensedataRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sensedataDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->sensedataRowChanging(this, (gcnew NewDataSet::sensedataRowChangeEvent((cli::safe_cast<NewDataSet::sensedataRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sensedataDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->sensedataRowDeleted(this, (gcnew NewDataSet::sensedataRowChangeEvent((cli::safe_cast<NewDataSet::sensedataRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sensedataDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->sensedataRowDeleting(this, (gcnew NewDataSet::sensedataRowChangeEvent((cli::safe_cast<NewDataSet::sensedataRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::sensedataDataTable::RemovesensedataRow(NewDataSet::sensedataRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::sensedataDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"sensedataDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::commentsDataTable::commentsDataTable() {
    this->TableName = L"comments";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::commentsDataTable::commentsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::commentsDataTable::commentsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::commentsDataTable::comments_IdColumn::get() {
    return this->columncomments_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::commentsDataTable::sumper_IdColumn::get() {
    return this->columnsumper_Id;
}

inline ::System::Int32 NewDataSet::commentsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::commentsRow^  NewDataSet::commentsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::commentsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::commentsDataTable::AddcommentsRow(NewDataSet::commentsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::commentsRow^  NewDataSet::commentsDataTable::AddcommentsRow(NewDataSet::sumperRow^  parentsumperRowBysumper_comments) {
    NewDataSet::commentsRow^  rowcommentsRow = (cli::safe_cast<NewDataSet::commentsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentsumperRowBysumper_comments != nullptr) {
        columnValuesArray[1] = parentsumperRowBysumper_comments[1];
    }
    rowcommentsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowcommentsRow);
    return rowcommentsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::commentsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::commentsDataTable::Clone() {
    NewDataSet::commentsDataTable^  cln = (cli::safe_cast<NewDataSet::commentsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::commentsDataTable::CreateInstance() {
    return (gcnew NewDataSet::commentsDataTable());
}

inline ::System::Void NewDataSet::commentsDataTable::InitVars() {
    this->columncomments_Id = __super::Columns[L"comments_Id"];
    this->columnsumper_Id = __super::Columns[L"sumper_Id"];
}

inline ::System::Void NewDataSet::commentsDataTable::InitClass() {
    this->columncomments_Id = (gcnew ::System::Data::DataColumn(L"comments_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncomments_Id);
    this->columnsumper_Id = (gcnew ::System::Data::DataColumn(L"sumper_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsumper_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columncomments_Id}, 
            true)));
    this->columncomments_Id->AutoIncrement = true;
    this->columncomments_Id->AllowDBNull = false;
    this->columncomments_Id->Unique = true;
}

inline NewDataSet::commentsRow^  NewDataSet::commentsDataTable::NewcommentsRow() {
    return (cli::safe_cast<NewDataSet::commentsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::commentsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::commentsRow(builder));
}

inline ::System::Type^  NewDataSet::commentsDataTable::GetRowType() {
    return NewDataSet::commentsRow::typeid;
}

inline ::System::Void NewDataSet::commentsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->commentsRowChanged(this, (gcnew NewDataSet::commentsRowChangeEvent((cli::safe_cast<NewDataSet::commentsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::commentsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->commentsRowChanging(this, (gcnew NewDataSet::commentsRowChangeEvent((cli::safe_cast<NewDataSet::commentsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::commentsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->commentsRowDeleted(this, (gcnew NewDataSet::commentsRowChangeEvent((cli::safe_cast<NewDataSet::commentsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::commentsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->commentsRowDeleting(this, (gcnew NewDataSet::commentsRowChangeEvent((cli::safe_cast<NewDataSet::commentsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::commentsDataTable::RemovecommentsRow(NewDataSet::commentsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::commentsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"commentsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::commentDataTable::commentDataTable() {
    this->TableName = L"comment";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::commentDataTable::commentDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::commentDataTable::commentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::commentDataTable::channelColumn::get() {
    return this->columnchannel;
}

inline ::System::Data::DataColumn^  NewDataSet::commentDataTable::textColumn::get() {
    return this->columntext;
}

inline ::System::Data::DataColumn^  NewDataSet::commentDataTable::comment_textColumn::get() {
    return this->columncomment_text;
}

inline ::System::Data::DataColumn^  NewDataSet::commentDataTable::comments_IdColumn::get() {
    return this->columncomments_Id;
}

inline ::System::Int32 NewDataSet::commentDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::commentRow^  NewDataSet::commentDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::commentRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::commentDataTable::AddcommentRow(NewDataSet::commentRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::commentRow^  NewDataSet::commentDataTable::AddcommentRow(System::Int32 channel, System::String^  text, 
            System::String^  comment_text, NewDataSet::commentsRow^  parentcommentsRowBycomments_comment) {
    NewDataSet::commentRow^  rowcommentRow = (cli::safe_cast<NewDataSet::commentRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {channel, text, comment_text, 
        nullptr};
    if (parentcommentsRowBycomments_comment != nullptr) {
        columnValuesArray[3] = parentcommentsRowBycomments_comment[0];
    }
    rowcommentRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowcommentRow);
    return rowcommentRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::commentDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::commentDataTable::Clone() {
    NewDataSet::commentDataTable^  cln = (cli::safe_cast<NewDataSet::commentDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::commentDataTable::CreateInstance() {
    return (gcnew NewDataSet::commentDataTable());
}

inline ::System::Void NewDataSet::commentDataTable::InitVars() {
    this->columnchannel = __super::Columns[L"channel"];
    this->columntext = __super::Columns[L"text"];
    this->columncomment_text = __super::Columns[L"comment_text"];
    this->columncomments_Id = __super::Columns[L"comments_Id"];
}

inline ::System::Void NewDataSet::commentDataTable::InitClass() {
    this->columnchannel = (gcnew ::System::Data::DataColumn(L"channel", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columnchannel);
    this->columntext = (gcnew ::System::Data::DataColumn(L"text", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
    __super::Columns->Add(this->columntext);
    this->columncomment_text = (gcnew ::System::Data::DataColumn(L"comment_text", ::System::String::typeid, nullptr, ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columncomment_text);
    this->columncomments_Id = (gcnew ::System::Data::DataColumn(L"comments_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncomments_Id);
    this->columnchannel->Namespace = L"";
    this->columntext->Namespace = L"";
    this->columncomment_text->AllowDBNull = false;
}

inline NewDataSet::commentRow^  NewDataSet::commentDataTable::NewcommentRow() {
    return (cli::safe_cast<NewDataSet::commentRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::commentDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::commentRow(builder));
}

inline ::System::Type^  NewDataSet::commentDataTable::GetRowType() {
    return NewDataSet::commentRow::typeid;
}

inline ::System::Void NewDataSet::commentDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->commentRowChanged(this, (gcnew NewDataSet::commentRowChangeEvent((cli::safe_cast<NewDataSet::commentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::commentDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->commentRowChanging(this, (gcnew NewDataSet::commentRowChangeEvent((cli::safe_cast<NewDataSet::commentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::commentDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->commentRowDeleted(this, (gcnew NewDataSet::commentRowChangeEvent((cli::safe_cast<NewDataSet::commentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::commentDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->commentRowDeleting(this, (gcnew NewDataSet::commentRowChangeEvent((cli::safe_cast<NewDataSet::commentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::commentDataTable::RemovecommentRow(NewDataSet::commentRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::commentDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"commentDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::sumperRow::sumperRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablesumper = (cli::safe_cast<NewDataSet::sumperDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::sumperRow::version::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablesumper->versionColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'version\' in table \'sumper\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::sumperRow::version::set(System::String^  value) {
    this[this->tablesumper->versionColumn] = value;
}

inline System::Int32 NewDataSet::sumperRow::sumper_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablesumper->sumper_IdColumn]));
}
inline System::Void NewDataSet::sumperRow::sumper_Id::set(System::Int32 value) {
    this[this->tablesumper->sumper_IdColumn] = value;
}

inline ::System::Boolean NewDataSet::sumperRow::IsversionNull() {
    return this->IsNull(this->tablesumper->versionColumn);
}

inline ::System::Void NewDataSet::sumperRow::SetversionNull() {
    this[this->tablesumper->versionColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::infoRow^  >^  NewDataSet::sumperRow::GetinfoRows() {
    if (this->Table->ChildRelations[L"sumper_info"] == nullptr) {
        return gcnew cli::array< NewDataSet::infoRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::infoRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"sumper_info"])));
    }
}

inline cli::array< NewDataSet::sensitivityRow^  >^  NewDataSet::sumperRow::GetsensitivityRows() {
    if (this->Table->ChildRelations[L"sumper_sensitivity"] == nullptr) {
        return gcnew cli::array< NewDataSet::sensitivityRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::sensitivityRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"sumper_sensitivity"])));
    }
}

inline cli::array< NewDataSet::commentsRow^  >^  NewDataSet::sumperRow::GetcommentsRows() {
    if (this->Table->ChildRelations[L"sumper_comments"] == nullptr) {
        return gcnew cli::array< NewDataSet::commentsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::commentsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"sumper_comments"])));
    }
}


inline NewDataSet::infoRow::infoRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableinfo = (cli::safe_cast<NewDataSet::infoDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::infoRow::date::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableinfo->dateColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'date\' in table \'info\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::infoRow::date::set(System::String^  value) {
    this[this->tableinfo->dateColumn] = value;
}

inline System::String^  NewDataSet::infoRow::time::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableinfo->timeColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'time\' in table \'info\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::infoRow::time::set(System::String^  value) {
    this[this->tableinfo->timeColumn] = value;
}

inline System::Int32 NewDataSet::infoRow::channels::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableinfo->channelsColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'channels\' in table \'info\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::infoRow::channels::set(System::Int32 value) {
    this[this->tableinfo->channelsColumn] = value;
}

inline System::String^  NewDataSet::infoRow::datapath::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableinfo->datapathColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'datapath\' in table \'info\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::infoRow::datapath::set(System::String^  value) {
    this[this->tableinfo->datapathColumn] = value;
}

inline System::Int32 NewDataSet::infoRow::compressed::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableinfo->compressedColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'compressed\' in table \'info\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::infoRow::compressed::set(System::Int32 value) {
    this[this->tableinfo->compressedColumn] = value;
}

inline System::String^  NewDataSet::infoRow::compressedpath::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableinfo->compressedpathColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'compressedpath\' in table \'info\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::infoRow::compressedpath::set(System::String^  value) {
    this[this->tableinfo->compressedpathColumn] = value;
}

inline System::String^  NewDataSet::infoRow::info_text::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableinfo->info_textColumn]));
}
inline System::Void NewDataSet::infoRow::info_text::set(System::String^  value) {
    this[this->tableinfo->info_textColumn] = value;
}

inline System::Int32 NewDataSet::infoRow::sumper_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableinfo->sumper_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'sumper_Id\' in table \'info\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::infoRow::sumper_Id::set(System::Int32 value) {
    this[this->tableinfo->sumper_IdColumn] = value;
}

inline NewDataSet::sumperRow^  NewDataSet::infoRow::sumperRow::get() {
    return (cli::safe_cast<NewDataSet::sumperRow^  >(this->GetParentRow(this->Table->ParentRelations[L"sumper_info"])));
}
inline System::Void NewDataSet::infoRow::sumperRow::set(NewDataSet::sumperRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"sumper_info"]);
}

inline ::System::Boolean NewDataSet::infoRow::IsdateNull() {
    return this->IsNull(this->tableinfo->dateColumn);
}

inline ::System::Void NewDataSet::infoRow::SetdateNull() {
    this[this->tableinfo->dateColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::infoRow::IstimeNull() {
    return this->IsNull(this->tableinfo->timeColumn);
}

inline ::System::Void NewDataSet::infoRow::SettimeNull() {
    this[this->tableinfo->timeColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::infoRow::IschannelsNull() {
    return this->IsNull(this->tableinfo->channelsColumn);
}

inline ::System::Void NewDataSet::infoRow::SetchannelsNull() {
    this[this->tableinfo->channelsColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::infoRow::IsdatapathNull() {
    return this->IsNull(this->tableinfo->datapathColumn);
}

inline ::System::Void NewDataSet::infoRow::SetdatapathNull() {
    this[this->tableinfo->datapathColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::infoRow::IscompressedNull() {
    return this->IsNull(this->tableinfo->compressedColumn);
}

inline ::System::Void NewDataSet::infoRow::SetcompressedNull() {
    this[this->tableinfo->compressedColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::infoRow::IscompressedpathNull() {
    return this->IsNull(this->tableinfo->compressedpathColumn);
}

inline ::System::Void NewDataSet::infoRow::SetcompressedpathNull() {
    this[this->tableinfo->compressedpathColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::infoRow::Issumper_IdNull() {
    return this->IsNull(this->tableinfo->sumper_IdColumn);
}

inline ::System::Void NewDataSet::infoRow::Setsumper_IdNull() {
    this[this->tableinfo->sumper_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::sensitivityRow::sensitivityRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablesensitivity = (cli::safe_cast<NewDataSet::sensitivityDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::sensitivityRow::sensitivity_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablesensitivity->sensitivity_IdColumn]));
}
inline System::Void NewDataSet::sensitivityRow::sensitivity_Id::set(System::Int32 value) {
    this[this->tablesensitivity->sensitivity_IdColumn] = value;
}

inline System::Int32 NewDataSet::sensitivityRow::sumper_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablesensitivity->sumper_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'sumper_Id\' in table \'sensitivity\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::sensitivityRow::sumper_Id::set(System::Int32 value) {
    this[this->tablesensitivity->sumper_IdColumn] = value;
}

inline NewDataSet::sumperRow^  NewDataSet::sensitivityRow::sumperRow::get() {
    return (cli::safe_cast<NewDataSet::sumperRow^  >(this->GetParentRow(this->Table->ParentRelations[L"sumper_sensitivity"])));
}
inline System::Void NewDataSet::sensitivityRow::sumperRow::set(NewDataSet::sumperRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"sumper_sensitivity"]);
}

inline ::System::Boolean NewDataSet::sensitivityRow::Issumper_IdNull() {
    return this->IsNull(this->tablesensitivity->sumper_IdColumn);
}

inline ::System::Void NewDataSet::sensitivityRow::Setsumper_IdNull() {
    this[this->tablesensitivity->sumper_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::sensedataRow^  >^  NewDataSet::sensitivityRow::GetsensedataRows() {
    if (this->Table->ChildRelations[L"sensitivity_sensedata"] == nullptr) {
        return gcnew cli::array< NewDataSet::sensedataRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::sensedataRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"sensitivity_sensedata"])));
    }
}


inline NewDataSet::sensedataRow::sensedataRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablesensedata = (cli::safe_cast<NewDataSet::sensedataDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::sensedataRow::channel::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablesensedata->channelColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'channel\' in table \'sensedata\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::sensedataRow::channel::set(System::Int32 value) {
    this[this->tablesensedata->channelColumn] = value;
}

inline System::Single NewDataSet::sensedataRow::level::get() {
    try {
        return (cli::safe_cast<::System::Single >(this[this->tablesensedata->levelColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'level\' in table \'sensedata\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::sensedataRow::level::set(System::Single value) {
    this[this->tablesensedata->levelColumn] = value;
}

inline System::String^  NewDataSet::sensedataRow::sensedata_text::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablesensedata->sensedata_textColumn]));
}
inline System::Void NewDataSet::sensedataRow::sensedata_text::set(System::String^  value) {
    this[this->tablesensedata->sensedata_textColumn] = value;
}

inline System::Int32 NewDataSet::sensedataRow::sensitivity_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablesensedata->sensitivity_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'sensitivity_Id\' in table \'sensedata\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::sensedataRow::sensitivity_Id::set(System::Int32 value) {
    this[this->tablesensedata->sensitivity_IdColumn] = value;
}

inline NewDataSet::sensitivityRow^  NewDataSet::sensedataRow::sensitivityRow::get() {
    return (cli::safe_cast<NewDataSet::sensitivityRow^  >(this->GetParentRow(this->Table->ParentRelations[L"sensitivity_sensedata"])));
}
inline System::Void NewDataSet::sensedataRow::sensitivityRow::set(NewDataSet::sensitivityRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"sensitivity_sensedata"]);
}

inline ::System::Boolean NewDataSet::sensedataRow::IschannelNull() {
    return this->IsNull(this->tablesensedata->channelColumn);
}

inline ::System::Void NewDataSet::sensedataRow::SetchannelNull() {
    this[this->tablesensedata->channelColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::sensedataRow::IslevelNull() {
    return this->IsNull(this->tablesensedata->levelColumn);
}

inline ::System::Void NewDataSet::sensedataRow::SetlevelNull() {
    this[this->tablesensedata->levelColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::sensedataRow::Issensitivity_IdNull() {
    return this->IsNull(this->tablesensedata->sensitivity_IdColumn);
}

inline ::System::Void NewDataSet::sensedataRow::Setsensitivity_IdNull() {
    this[this->tablesensedata->sensitivity_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::commentsRow::commentsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablecomments = (cli::safe_cast<NewDataSet::commentsDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::commentsRow::comments_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablecomments->comments_IdColumn]));
}
inline System::Void NewDataSet::commentsRow::comments_Id::set(System::Int32 value) {
    this[this->tablecomments->comments_IdColumn] = value;
}

inline System::Int32 NewDataSet::commentsRow::sumper_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecomments->sumper_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'sumper_Id\' in table \'comments\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::commentsRow::sumper_Id::set(System::Int32 value) {
    this[this->tablecomments->sumper_IdColumn] = value;
}

inline NewDataSet::sumperRow^  NewDataSet::commentsRow::sumperRow::get() {
    return (cli::safe_cast<NewDataSet::sumperRow^  >(this->GetParentRow(this->Table->ParentRelations[L"sumper_comments"])));
}
inline System::Void NewDataSet::commentsRow::sumperRow::set(NewDataSet::sumperRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"sumper_comments"]);
}

inline ::System::Boolean NewDataSet::commentsRow::Issumper_IdNull() {
    return this->IsNull(this->tablecomments->sumper_IdColumn);
}

inline ::System::Void NewDataSet::commentsRow::Setsumper_IdNull() {
    this[this->tablecomments->sumper_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::commentRow^  >^  NewDataSet::commentsRow::GetcommentRows() {
    if (this->Table->ChildRelations[L"comments_comment"] == nullptr) {
        return gcnew cli::array< NewDataSet::commentRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::commentRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"comments_comment"])));
    }
}


inline NewDataSet::commentRow::commentRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablecomment = (cli::safe_cast<NewDataSet::commentDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::commentRow::channel::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecomment->channelColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'channel\' in table \'comment\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::commentRow::channel::set(System::Int32 value) {
    this[this->tablecomment->channelColumn] = value;
}

inline System::String^  NewDataSet::commentRow::text::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablecomment->textColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'text\' in table \'comment\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::commentRow::text::set(System::String^  value) {
    this[this->tablecomment->textColumn] = value;
}

inline System::String^  NewDataSet::commentRow::comment_text::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablecomment->comment_textColumn]));
}
inline System::Void NewDataSet::commentRow::comment_text::set(System::String^  value) {
    this[this->tablecomment->comment_textColumn] = value;
}

inline System::Int32 NewDataSet::commentRow::comments_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecomment->comments_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'comments_Id\' in table \'comment\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::commentRow::comments_Id::set(System::Int32 value) {
    this[this->tablecomment->comments_IdColumn] = value;
}

inline NewDataSet::commentsRow^  NewDataSet::commentRow::commentsRow::get() {
    return (cli::safe_cast<NewDataSet::commentsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"comments_comment"])));
}
inline System::Void NewDataSet::commentRow::commentsRow::set(NewDataSet::commentsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"comments_comment"]);
}

inline ::System::Boolean NewDataSet::commentRow::IschannelNull() {
    return this->IsNull(this->tablecomment->channelColumn);
}

inline ::System::Void NewDataSet::commentRow::SetchannelNull() {
    this[this->tablecomment->channelColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::commentRow::IstextNull() {
    return this->IsNull(this->tablecomment->textColumn);
}

inline ::System::Void NewDataSet::commentRow::SettextNull() {
    this[this->tablecomment->textColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::commentRow::Iscomments_IdNull() {
    return this->IsNull(this->tablecomment->comments_IdColumn);
}

inline ::System::Void NewDataSet::commentRow::Setcomments_IdNull() {
    this[this->tablecomment->comments_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::sumperRowChangeEvent::sumperRowChangeEvent(NewDataSet::sumperRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::sumperRow^  NewDataSet::sumperRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::sumperRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::infoRowChangeEvent::infoRowChangeEvent(NewDataSet::infoRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::infoRow^  NewDataSet::infoRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::infoRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::sensitivityRowChangeEvent::sensitivityRowChangeEvent(NewDataSet::sensitivityRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::sensitivityRow^  NewDataSet::sensitivityRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::sensitivityRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::sensedataRowChangeEvent::sensedataRowChangeEvent(NewDataSet::sensedataRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::sensedataRow^  NewDataSet::sensedataRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::sensedataRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::commentsRowChangeEvent::commentsRowChangeEvent(NewDataSet::commentsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::commentsRow^  NewDataSet::commentsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::commentsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::commentRowChangeEvent::commentRowChangeEvent(NewDataSet::commentRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::commentRow^  NewDataSet::commentRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::commentRowChangeEvent::Action::get() {
    return this->eventAction;
}
